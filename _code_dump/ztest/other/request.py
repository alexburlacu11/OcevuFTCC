#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Mon Mar 31 14:20:18 2014 by generateDS.py version 2.12b.
#

import sys
import getopt
import re as re_
import base64
import datetime as datetime_

etree_ = None
Verbose_import_ = False
(
    XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")


def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
            'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data
        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class REQUEST(GeneratedsSuper):
    """A request is the element which allow to define observation program
    of the OFT telescope It contents sequences"""
    subclass = None
    superclass = None
    def __init__(self, OWNER=None, REQUEST_ID=None, SEQUENCES=None):
        self.OWNER = OWNER
        self.REQUEST_ID = REQUEST_ID
        if SEQUENCES is None:
            self.SEQUENCES = []
        else:
            self.SEQUENCES = SEQUENCES
    def factory(*args_, **kwargs_):
        if REQUEST.subclass:
            return REQUEST.subclass(*args_, **kwargs_)
        else:
            return REQUEST(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OWNER(self): return self.OWNER
    def set_OWNER(self, OWNER): self.OWNER = OWNER
    def get_REQUEST_ID(self): return self.REQUEST_ID
    def set_REQUEST_ID(self, REQUEST_ID): self.REQUEST_ID = REQUEST_ID
    def get_SEQUENCES(self): return self.SEQUENCES
    def set_SEQUENCES(self, SEQUENCES): self.SEQUENCES = SEQUENCES
    def add_SEQUENCES(self, value): self.SEQUENCES.append(value)
    def insert_SEQUENCES(self, index, value): self.SEQUENCES[index] = value
    def hasContent_(self):
        if (
            self.OWNER is not None or
            self.REQUEST_ID is not None or
            self.SEQUENCES
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='REQUEST', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='REQUEST')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='REQUEST', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='REQUEST'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='REQUEST', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OWNER is not None:
            self.OWNER.export(outfile, level, namespace_, name_='OWNER', pretty_print=pretty_print)
        if self.REQUEST_ID is not None:
            self.REQUEST_ID.export(outfile, level, namespace_, name_='REQUEST_ID', pretty_print=pretty_print)
        for SEQUENCES_ in self.SEQUENCES:
            SEQUENCES_.export(outfile, level, namespace_, name_='SEQUENCES', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='REQUEST'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.OWNER is not None:
            showIndent(outfile, level)
            outfile.write('OWNER=model_.OWNERType(\n')
            self.OWNER.exportLiteral(outfile, level, name_='OWNER')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.REQUEST_ID is not None:
            showIndent(outfile, level)
            outfile.write('REQUEST_ID=model_.REQUEST_IDType(\n')
            self.REQUEST_ID.exportLiteral(outfile, level, name_='REQUEST_ID')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('SEQUENCES=[\n')
        level += 1
        for SEQUENCES_ in self.SEQUENCES:
            showIndent(outfile, level)
            outfile.write('model_.SEQUENCESType(\n')
            SEQUENCES_.exportLiteral(outfile, level, name_='SEQUENCESType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OWNER':
            obj_ = OWNERType.factory()
            obj_.build(child_)
            self.OWNER = obj_
        elif nodeName_ == 'REQUEST_ID':
            obj_ = REQUEST_IDType.factory()
            obj_.build(child_)
            self.REQUEST_ID = obj_
        elif nodeName_ == 'SEQUENCES':
            obj_ = SEQUENCESType.factory()
            obj_.build(child_)
            self.SEQUENCES.append(obj_)
# end class REQUEST


class OWNERType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Laboratory=None, TelNumber=None):
        self.Name = Name
        self.Laboratory = Laboratory
        self.TelNumber = TelNumber
    def factory(*args_, **kwargs_):
        if OWNERType.subclass:
            return OWNERType.subclass(*args_, **kwargs_)
        else:
            return OWNERType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Laboratory(self): return self.Laboratory
    def set_Laboratory(self, Laboratory): self.Laboratory = Laboratory
    def get_TelNumber(self): return self.TelNumber
    def set_TelNumber(self, TelNumber): self.TelNumber = TelNumber
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Laboratory is not None or
            self.TelNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OWNERType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OWNERType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OWNERType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OWNERType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OWNERType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.Laboratory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLaboratory>%s</%sLaboratory>%s' % (namespace_, self.gds_format_string(quote_xml(self.Laboratory).encode(ExternalEncoding), input_name='Laboratory'), namespace_, eol_))
        if self.TelNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTelNumber>%s</%sTelNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.TelNumber).encode(ExternalEncoding), input_name='TelNumber'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='OWNERType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.Laboratory is not None:
            showIndent(outfile, level)
            outfile.write('Laboratory=%s,\n' % quote_python(self.Laboratory).encode(ExternalEncoding))
        if self.TelNumber is not None:
            showIndent(outfile, level)
            outfile.write('TelNumber=%s,\n' % quote_python(self.TelNumber).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Laboratory':
            Laboratory_ = child_.text
            Laboratory_ = self.gds_validate_string(Laboratory_, node, 'Laboratory')
            self.Laboratory = Laboratory_
        elif nodeName_ == 'TelNumber':
            TelNumber_ = child_.text
            TelNumber_ = self.gds_validate_string(TelNumber_, node, 'TelNumber')
            self.TelNumber = TelNumber_
# end class OWNERType


class REQUEST_IDType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IDNum=None, object=None, seq_number=None):
        self.IDNum = IDNum
        self.object = object
        self.seq_number = seq_number
    def factory(*args_, **kwargs_):
        if REQUEST_IDType.subclass:
            return REQUEST_IDType.subclass(*args_, **kwargs_)
        else:
            return REQUEST_IDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IDNum(self): return self.IDNum
    def set_IDNum(self, IDNum): self.IDNum = IDNum
    def get_object(self): return self.object
    def set_object(self, object): self.object = object
    def get_seq_number(self): return self.seq_number
    def set_seq_number(self, seq_number): self.seq_number = seq_number
    def hasContent_(self):
        if (
            self.IDNum is not None or
            self.object is not None or
            self.seq_number is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='REQUEST_IDType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='REQUEST_IDType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='REQUEST_IDType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='REQUEST_IDType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='REQUEST_IDType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IDNum is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIDNum>%s</%sIDNum>%s' % (namespace_, self.gds_format_integer(self.IDNum, input_name='IDNum'), namespace_, eol_))
        if self.object is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobject>%s</%sobject>%s' % (namespace_, self.gds_format_string(quote_xml(self.object).encode(ExternalEncoding), input_name='object'), namespace_, eol_))
        if self.seq_number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sseq_number>%s</%sseq_number>%s' % (namespace_, self.gds_format_integer(self.seq_number, input_name='seq_number'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='REQUEST_IDType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.IDNum is not None:
            showIndent(outfile, level)
            outfile.write('IDNum=%d,\n' % self.IDNum)
        if self.object is not None:
            showIndent(outfile, level)
            outfile.write('object=%s,\n' % quote_python(self.object).encode(ExternalEncoding))
        if self.seq_number is not None:
            showIndent(outfile, level)
            outfile.write('seq_number=%d,\n' % self.seq_number)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IDNum':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IDNum')
            self.IDNum = ival_
        elif nodeName_ == 'object':
            object_ = child_.text
            object_ = self.gds_validate_string(object_, node, 'object')
            self.object = object_
        elif nodeName_ == 'seq_number':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'seq_number')
            self.seq_number = ival_
# end class REQUEST_IDType


class SEQUENCESType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Duration=None, ID_seq=None, Exec_date=None, AnalyseType=None, Priority_Level=None, ObservationCoord=None, ALBUM_VIS=None, ALBUM_NIR=None, ALBUM_OTHER=None):
        self.Duration = _cast(float, Duration)
        self.ID_seq = _cast(int, ID_seq)
        if isinstance(Exec_date, basestring):
            initvalue_ = datetime_.datetime.strptime(Exec_date, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = Exec_date
        self.Exec_date = initvalue_
        self.AnalyseType = _cast(None, AnalyseType)
        self.Priority_Level = _cast(int, Priority_Level)
        self.ObservationCoord = ObservationCoord
        if ALBUM_VIS is None:
            self.ALBUM_VIS = []
        else:
            self.ALBUM_VIS = ALBUM_VIS
        if ALBUM_NIR is None:
            self.ALBUM_NIR = []
        else:
            self.ALBUM_NIR = ALBUM_NIR
        if ALBUM_OTHER is None:
            self.ALBUM_OTHER = []
        else:
            self.ALBUM_OTHER = ALBUM_OTHER
    def factory(*args_, **kwargs_):
        if SEQUENCESType.subclass:
            return SEQUENCESType.subclass(*args_, **kwargs_)
        else:
            return SEQUENCESType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ObservationCoord(self): return self.ObservationCoord
    def set_ObservationCoord(self, ObservationCoord): self.ObservationCoord = ObservationCoord
    def get_ALBUM_VIS(self): return self.ALBUM_VIS
    def set_ALBUM_VIS(self, ALBUM_VIS): self.ALBUM_VIS = ALBUM_VIS
    def add_ALBUM_VIS(self, value): self.ALBUM_VIS.append(value)
    def insert_ALBUM_VIS(self, index, value): self.ALBUM_VIS[index] = value
    def get_ALBUM_NIR(self): return self.ALBUM_NIR
    def set_ALBUM_NIR(self, ALBUM_NIR): self.ALBUM_NIR = ALBUM_NIR
    def add_ALBUM_NIR(self, value): self.ALBUM_NIR.append(value)
    def insert_ALBUM_NIR(self, index, value): self.ALBUM_NIR[index] = value
    def get_ALBUM_OTHER(self): return self.ALBUM_OTHER
    def set_ALBUM_OTHER(self, ALBUM_OTHER): self.ALBUM_OTHER = ALBUM_OTHER
    def add_ALBUM_OTHER(self, value): self.ALBUM_OTHER.append(value)
    def insert_ALBUM_OTHER(self, index, value): self.ALBUM_OTHER[index] = value
    def get_Duration(self): return self.Duration
    def set_Duration(self, Duration): self.Duration = Duration
    def get_ID_seq(self): return self.ID_seq
    def set_ID_seq(self, ID_seq): self.ID_seq = ID_seq
    def get_Exec_date(self): return self.Exec_date
    def set_Exec_date(self, Exec_date): self.Exec_date = Exec_date
    def get_AnalyseType(self): return self.AnalyseType
    def set_AnalyseType(self, AnalyseType): self.AnalyseType = AnalyseType
    def get_Priority_Level(self): return self.Priority_Level
    def set_Priority_Level(self, Priority_Level): self.Priority_Level = Priority_Level
    def hasContent_(self):
        if (
            self.ObservationCoord is not None or
            self.ALBUM_VIS or
            self.ALBUM_NIR or
            self.ALBUM_OTHER
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SEQUENCESType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SEQUENCESType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SEQUENCESType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SEQUENCESType'):
        if self.Duration is not None and 'Duration' not in already_processed:
            already_processed.add('Duration')
            outfile.write(' Duration="%s"' % self.gds_format_float(self.Duration, input_name='Duration'))
        if self.ID_seq is not None and 'ID_seq' not in already_processed:
            already_processed.add('ID_seq')
            outfile.write(' ID_seq="%s"' % self.gds_format_integer(self.ID_seq, input_name='ID_seq'))
        if self.Exec_date is not None and 'Exec_date' not in already_processed:
            already_processed.add('Exec_date')
            outfile.write(' Exec_date="%s"' % self.gds_format_datetime(self.Exec_date, input_name='Exec_date'))
        if self.AnalyseType is not None and 'AnalyseType' not in already_processed:
            already_processed.add('AnalyseType')
            outfile.write(' AnalyseType=%s' % (self.gds_format_string(quote_attrib(self.AnalyseType).encode(ExternalEncoding), input_name='AnalyseType'), ))
        if self.Priority_Level is not None and 'Priority_Level' not in already_processed:
            already_processed.add('Priority_Level')
            outfile.write(' Priority_Level="%s"' % self.gds_format_integer(self.Priority_Level, input_name='Priority_Level'))
    def exportChildren(self, outfile, level, namespace_='', name_='SEQUENCESType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ObservationCoord is not None:
            self.ObservationCoord.export(outfile, level, namespace_, name_='ObservationCoord', pretty_print=pretty_print)
        for ALBUM_VIS_ in self.ALBUM_VIS:
            ALBUM_VIS_.export(outfile, level, namespace_, name_='ALBUM_VIS', pretty_print=pretty_print)
        for ALBUM_NIR_ in self.ALBUM_NIR:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sALBUM_NIR>%s</%sALBUM_NIR>%s' % (namespace_, self.gds_format_string(quote_xml(ALBUM_NIR_).encode(ExternalEncoding), input_name='ALBUM_NIR'), namespace_, eol_))
        for ALBUM_OTHER_ in self.ALBUM_OTHER:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sALBUM_OTHER>%s</%sALBUM_OTHER>%s' % (namespace_, self.gds_format_string(quote_xml(ALBUM_OTHER_).encode(ExternalEncoding), input_name='ALBUM_OTHER'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='SEQUENCESType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Duration is not None and 'Duration' not in already_processed:
            already_processed.add('Duration')
            showIndent(outfile, level)
            outfile.write('Duration=%f,\n' % (self.Duration,))
        if self.ID_seq is not None and 'ID_seq' not in already_processed:
            already_processed.add('ID_seq')
            showIndent(outfile, level)
            outfile.write('ID_seq=%d,\n' % (self.ID_seq,))
        if self.Exec_date is not None and 'Exec_date' not in already_processed:
            already_processed.add('Exec_date')
            showIndent(outfile, level)
            outfile.write('Exec_date=model_.GeneratedsSuper.gds_parse_datetime("%s"),\n' % self.gds_format_datetime(self.Exec_date, input_name='Exec_date'))
        if self.AnalyseType is not None and 'AnalyseType' not in already_processed:
            already_processed.add('AnalyseType')
            showIndent(outfile, level)
            outfile.write('AnalyseType="%s",\n' % (self.AnalyseType,))
        if self.Priority_Level is not None and 'Priority_Level' not in already_processed:
            already_processed.add('Priority_Level')
            showIndent(outfile, level)
            outfile.write('Priority_Level=%d,\n' % (self.Priority_Level,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ObservationCoord is not None:
            showIndent(outfile, level)
            outfile.write('ObservationCoord=model_.ObservationCoordType(\n')
            self.ObservationCoord.exportLiteral(outfile, level, name_='ObservationCoord')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('ALBUM_VIS=[\n')
        level += 1
        for ALBUM_VIS_ in self.ALBUM_VIS:
            showIndent(outfile, level)
            outfile.write('model_.ALBUM_VISType(\n')
            ALBUM_VIS_.exportLiteral(outfile, level, name_='ALBUM_VISType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ALBUM_NIR=[\n')
        level += 1
        for ALBUM_NIR_ in self.ALBUM_NIR:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(ALBUM_NIR_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ALBUM_OTHER=[\n')
        level += 1
        for ALBUM_OTHER_ in self.ALBUM_OTHER:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(ALBUM_OTHER_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Duration', node)
        if value is not None and 'Duration' not in already_processed:
            already_processed.add('Duration')
            try:
                self.Duration = float(value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (Duration): %s' % exp)
        value = find_attr_value_('ID_seq', node)
        if value is not None and 'ID_seq' not in already_processed:
            already_processed.add('ID_seq')
            try:
                self.ID_seq = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('Exec_date', node)
        if value is not None and 'Exec_date' not in already_processed:
            already_processed.add('Exec_date')
            try:
                self.Exec_date = self.gds_parse_datetime(value)
            except ValueError, exp:
                raise ValueError('Bad date-time attribute (Exec_date): %s' % exp)
        value = find_attr_value_('AnalyseType', node)
        if value is not None and 'AnalyseType' not in already_processed:
            already_processed.add('AnalyseType')
            self.AnalyseType = value
        value = find_attr_value_('Priority_Level', node)
        if value is not None and 'Priority_Level' not in already_processed:
            already_processed.add('Priority_Level')
            try:
                self.Priority_Level = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ObservationCoord':
            obj_ = ObservationCoordType.factory()
            obj_.build(child_)
            self.ObservationCoord = obj_
        elif nodeName_ == 'ALBUM_VIS':
            obj_ = ALBUM_VISType.factory()
            obj_.build(child_)
            self.ALBUM_VIS.append(obj_)
        elif nodeName_ == 'ALBUM_NIR':
            ALBUM_NIR_ = child_.text
            ALBUM_NIR_ = self.gds_validate_string(ALBUM_NIR_, node, 'ALBUM_NIR')
            self.ALBUM_NIR.append(ALBUM_NIR_)
        elif nodeName_ == 'ALBUM_OTHER':
            ALBUM_OTHER_ = child_.text
            ALBUM_OTHER_ = self.gds_validate_string(ALBUM_OTHER_, node, 'ALBUM_OTHER')
            self.ALBUM_OTHER.append(ALBUM_OTHER_)
# end class SEQUENCESType


class ALBUM_NIR(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if ALBUM_NIR.subclass:
            return ALBUM_NIR.subclass(*args_, **kwargs_)
        else:
            return ALBUM_NIR(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ALBUM_NIR', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ALBUM_NIR')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ALBUM_NIR', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ALBUM_NIR'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ALBUM_NIR', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='ALBUM_NIR'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ALBUM_NIR


class ALBUM_OTHER(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if ALBUM_OTHER.subclass:
            return ALBUM_OTHER.subclass(*args_, **kwargs_)
        else:
            return ALBUM_OTHER(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ALBUM_OTHER', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ALBUM_OTHER')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ALBUM_OTHER', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ALBUM_OTHER'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ALBUM_OTHER', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='ALBUM_OTHER'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ALBUM_OTHER


class ObservationCoordType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Dec=None, coord_system_id=None, Ra=None):
        self.Dec = _cast(float, Dec)
        self.coord_system_id = _cast(None, coord_system_id)
        self.Ra = _cast(float, Ra)
        pass
    def factory(*args_, **kwargs_):
        if ObservationCoordType.subclass:
            return ObservationCoordType.subclass(*args_, **kwargs_)
        else:
            return ObservationCoordType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Dec(self): return self.Dec
    def set_Dec(self, Dec): self.Dec = Dec
    def get_coord_system_id(self): return self.coord_system_id
    def set_coord_system_id(self, coord_system_id): self.coord_system_id = coord_system_id
    def get_Ra(self): return self.Ra
    def set_Ra(self, Ra): self.Ra = Ra
    def validate_idValues(self, value):
        # Validate type idValues, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ObservationCoordType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ObservationCoordType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ObservationCoordType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ObservationCoordType'):
        if self.Dec is not None and 'Dec' not in already_processed:
            already_processed.add('Dec')
            outfile.write(' Dec="%s"' % self.gds_format_float(self.Dec, input_name='Dec'))
        if self.coord_system_id is not None and 'coord_system_id' not in already_processed:
            already_processed.add('coord_system_id')
            outfile.write(' coord_system_id=%s' % (quote_attrib(self.coord_system_id), ))
        if self.Ra is not None and 'Ra' not in already_processed:
            already_processed.add('Ra')
            outfile.write(' Ra="%s"' % self.gds_format_float(self.Ra, input_name='Ra'))
    def exportChildren(self, outfile, level, namespace_='', name_='ObservationCoordType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='ObservationCoordType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Dec is not None and 'Dec' not in already_processed:
            already_processed.add('Dec')
            showIndent(outfile, level)
            outfile.write('Dec=%f,\n' % (self.Dec,))
        if self.coord_system_id is not None and 'coord_system_id' not in already_processed:
            already_processed.add('coord_system_id')
            showIndent(outfile, level)
            outfile.write('coord_system_id="%s",\n' % (self.coord_system_id,))
        if self.Ra is not None and 'Ra' not in already_processed:
            already_processed.add('Ra')
            showIndent(outfile, level)
            outfile.write('Ra=%f,\n' % (self.Ra,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Dec', node)
        if value is not None and 'Dec' not in already_processed:
            already_processed.add('Dec')
            try:
                self.Dec = float(value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (Dec): %s' % exp)
        value = find_attr_value_('coord_system_id', node)
        if value is not None and 'coord_system_id' not in already_processed:
            already_processed.add('coord_system_id')
            self.coord_system_id = value
            self.validate_idValues(self.coord_system_id)    # validate type idValues
        value = find_attr_value_('Ra', node)
        if value is not None and 'Ra' not in already_processed:
            already_processed.add('Ra')
            try:
                self.Ra = float(value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (Ra): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ObservationCoordType


class ALBUM_VISType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ExposureTime=None, Iteration=None, PlanNumber=None, Filter=None):
        self.ExposureTime = _cast(int, ExposureTime)
        self.Iteration = _cast(int, Iteration)
        self.PlanNumber = _cast(int, PlanNumber)
        self.Filter = _cast(None, Filter)
        pass
    def factory(*args_, **kwargs_):
        if ALBUM_VISType.subclass:
            return ALBUM_VISType.subclass(*args_, **kwargs_)
        else:
            return ALBUM_VISType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ExposureTime(self): return self.ExposureTime
    def set_ExposureTime(self, ExposureTime): self.ExposureTime = ExposureTime
    def get_Iteration(self): return self.Iteration
    def set_Iteration(self, Iteration): self.Iteration = Iteration
    def get_PlanNumber(self): return self.PlanNumber
    def set_PlanNumber(self, PlanNumber): self.PlanNumber = PlanNumber
    def get_Filter(self): return self.Filter
    def set_Filter(self, Filter): self.Filter = Filter
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ALBUM_VISType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ALBUM_VISType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ALBUM_VISType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ALBUM_VISType'):
        if self.ExposureTime is not None and 'ExposureTime' not in already_processed:
            already_processed.add('ExposureTime')
            outfile.write(' ExposureTime="%s"' % self.gds_format_integer(self.ExposureTime, input_name='ExposureTime'))
        if self.Iteration is not None and 'Iteration' not in already_processed:
            already_processed.add('Iteration')
            outfile.write(' Iteration="%s"' % self.gds_format_integer(self.Iteration, input_name='Iteration'))
        if self.PlanNumber is not None and 'PlanNumber' not in already_processed:
            already_processed.add('PlanNumber')
            outfile.write(' PlanNumber="%s"' % self.gds_format_integer(self.PlanNumber, input_name='PlanNumber'))
        if self.Filter is not None and 'Filter' not in already_processed:
            already_processed.add('Filter')
            outfile.write(' Filter=%s' % (self.gds_format_string(quote_attrib(self.Filter).encode(ExternalEncoding), input_name='Filter'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ALBUM_VISType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='ALBUM_VISType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.ExposureTime is not None and 'ExposureTime' not in already_processed:
            already_processed.add('ExposureTime')
            showIndent(outfile, level)
            outfile.write('ExposureTime=%d,\n' % (self.ExposureTime,))
        if self.Iteration is not None and 'Iteration' not in already_processed:
            already_processed.add('Iteration')
            showIndent(outfile, level)
            outfile.write('Iteration=%d,\n' % (self.Iteration,))
        if self.PlanNumber is not None and 'PlanNumber' not in already_processed:
            already_processed.add('PlanNumber')
            showIndent(outfile, level)
            outfile.write('PlanNumber=%d,\n' % (self.PlanNumber,))
        if self.Filter is not None and 'Filter' not in already_processed:
            already_processed.add('Filter')
            showIndent(outfile, level)
            outfile.write('Filter="%s",\n' % (self.Filter,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ExposureTime', node)
        if value is not None and 'ExposureTime' not in already_processed:
            already_processed.add('ExposureTime')
            try:
                self.ExposureTime = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('Iteration', node)
        if value is not None and 'Iteration' not in already_processed:
            already_processed.add('Iteration')
            try:
                self.Iteration = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('PlanNumber', node)
        if value is not None and 'PlanNumber' not in already_processed:
            already_processed.add('PlanNumber')
            try:
                self.PlanNumber = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('Filter', node)
        if value is not None and 'Filter' not in already_processed:
            already_processed.add('Filter')
            self.Filter = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ALBUM_VISType


GDSClassesMapping = {
    'OWNER': OWNERType,
    'ALBUM_VIS': ALBUM_VISType,
    'SEQUENCES': SEQUENCESType,
    'ObservationCoord': ObservationCoordType,
    'REQUEST_ID': REQUEST_IDType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'REQUEST'
        rootClass = REQUEST
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'REQUEST'
        rootClass = REQUEST
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    roots = get_root_tag(rootNode)
    rootClass = roots[1]
    if rootClass is None:
        rootClass = REQUEST
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_="REQUEST",
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'REQUEST'
        rootClass = REQUEST
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from request import *\n\n')
        sys.stdout.write('import request as model_\n\n')
        sys.stdout.write('rootObj = model_.rootTag(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ALBUM_NIR",
    "ALBUM_OTHER",
    "ALBUM_VISType",
    "OWNERType",
    "ObservationCoordType",
    "REQUEST",
    "REQUEST_IDType",
    "SEQUENCESType"
]
